{"version":3,"sources":["App.js","ipfs.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","setWaveCount","message","setMessage","setIpfsHash","buffer","setBuffer","file","convertToBuffer","reader","a","Buffer","from","result","allWaves","setAllWaves","contractAddress","contractABI","abi","getAllWaves","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","ipfsHash","console","log","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getTotalWaves","count","toNumber","ipfs","add","path","gasLimit","waveTxn","hash","wait","useEffect","onNewWave","prevState","on","off","getDocumentLink","url","className","style","color","margin","height","width","fontSize","placeholder","type","id","name","value","onChange","e","target","background","padding","display","cursor","for","size","event","stopPropagation","preventDefault","files","FileReader","readAsArrayBuffer","onloadend","onClick","map","index","key","backgroundColor","marginTop","toString","href","require","create","host","port","protocol","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52a97a30.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport ipfs from \"./ipfs\";\r\nimport { ethers } from \"ethers\";\r\nimport abi from \"./utils/WavePortal.json\";\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n\r\n  const [waveCount, setWaveCount] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [ipfs_Hash, setIpfsHash] = useState(\"\");\r\n  const [buffer, setBuffer] = useState(\"\");\r\n  var file = \"\";\r\n\r\n  //   /** @dev Take file input from user */\r\n  const captureFile = (event) => {\r\n    event.stopPropagation(); // stop react bubbling up click event\r\n    event.preventDefault(); // stop react refreshing the browser\r\n    file = event.target.files[0];\r\n    let reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => convertToBuffer(reader);\r\n  };\r\n\r\n  //     /** @dev Convert the file to buffer to store on IPFS */\r\n  const convertToBuffer = async (reader) => {\r\n    //file is converted to a buffer for upload to IPFS\r\n    const buffer = await Buffer.from(reader.result);\r\n    //set this buffer as state variable, using React hook function\r\n    setBuffer(buffer);\r\n  };\r\n\r\n  /*\r\n   * All state property to store all waves\r\n   */\r\n  const [allWaves, setAllWaves] = useState([]);\r\n\r\n  /**\r\n   * Create a variable here that holds the contract address after you deploy!\r\n   */\r\n  const contractAddress = \"0x9782989876200AE069064F601128Aafed288A293\";\r\n  const contractABI = abi.abi;\r\n\r\n  /*\r\n   * Create a method that gets all waves from your contract\r\n   */\r\n  const getAllWaves = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(\r\n          contractAddress,\r\n          contractABI,\r\n          signer\r\n        );\r\n\r\n        /*\r\n         * Call the getAllWaves method from your Smart Contract\r\n         */\r\n        const waves = await wavePortalContract.getAllWaves();\r\n\r\n        /*\r\n         * We only need address, timestamp, and message in our UI so let's\r\n         * pick those out\r\n         */\r\n        let wavesCleaned = [];\r\n        waves.forEach((wave) => {\r\n          wavesCleaned.push({\r\n            address: wave.waver,\r\n            timestamp: new Date(wave.timestamp * 1000),\r\n            message: wave.message,\r\n            ipfsHash: wave.ipfsHash,\r\n          });\r\n        });\r\n\r\n        /*\r\n         * Store our data in React State\r\n         */\r\n        setAllWaves(wavesCleaned);\r\n        console.log(wavesCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account);\r\n        getAllWaves();\r\n      } else {\r\n        console.log(\"No authorized account found\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Implement your connectWallet method here\r\n   */\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const wave = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(\r\n          contractAddress,\r\n          contractABI,\r\n          signer\r\n        );\r\n\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n        setWaveCount(count.toNumber());\r\n\r\n        //ipfs-functionality\r\n        const ipfsHash = await ipfs.add(buffer);\r\n        console.log(\"ipfsHash after ipfs.add:\", ipfsHash.path);\r\n        setIpfsHash(ipfsHash.path);\r\n        /*\r\n         * Execute the actual wave from your smart contract\r\n         */\r\n\r\n        console.log(ipfsHash, message, \"and\", ipfsHash.path);\r\n        const waveTxn = await wavePortalContract.wave(message, ipfsHash.path, {\r\n          gasLimit: 300000,\r\n        });\r\n        console.log(\"Mining...\", waveTxn.hash);\r\n\r\n        await waveTxn.wait();\r\n        console.log(\"Mined -- \", waveTxn.hash);\r\n\r\n        count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n        setWaveCount(count.toNumber());\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  /**\r\n   * Listen in for emitter events!\r\n   */\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n\r\n    let wavePortalContract;\r\n\r\n    const onNewWave = (from, timestamp, message, ipfsHash) => {\r\n      console.log(\"NewWave\", from, timestamp, message, ipfsHash);\r\n      setAllWaves((prevState) => [\r\n        ...prevState,\r\n        {\r\n          address: from,\r\n          timestamp: new Date(timestamp * 1000),\r\n          message: message,\r\n          ipfsHash: ipfsHash,\r\n        },\r\n      ]);\r\n    };\r\n\r\n    if (window.ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n\r\n      wavePortalContract = new ethers.Contract(\r\n        contractAddress,\r\n        contractABI,\r\n        signer\r\n      );\r\n      wavePortalContract.on(\"NewWave\", onNewWave);\r\n    }\r\n\r\n    return () => {\r\n      if (wavePortalContract) {\r\n        wavePortalContract.off(\"NewWave\", onNewWave);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const getViewButton = (hash) => {\r\n    if (hash == \"\") {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const getDocumentLink = (hash) => {\r\n    let url = \"https://gateway.ipfs.io/ipfs/\";\r\n    url = url + hash;\r\n    return url;\r\n  };\r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div style={{ color: \"red\" }} className=\"header\">\r\n          👋 Hello there!\r\n        </div>\r\n\r\n        <div style={{ color: \"blue\" }} className=\"bio\">\r\n          I am Saujan Tiwari and I am learning Web3 !!! Connect your Ethereum\r\n          wallet and send me a message by waving at me!\r\n        </div>\r\n\r\n        <div style={{ margin: 20 }}>\r\n          <input\r\n            style={{ height: 50, width: 500, fontSize: 20, color: \"green\" }}\r\n            placeholder=\"Enter Message to send me\"\r\n            type=\"text\"\r\n            id=\"message\"\r\n            name=\"message\"\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n          ></input>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            color: \"red\",\r\n            background: \"OldLace\",\r\n            padding: \"10px 20px\",\r\n          }}\r\n        >\r\n          <label\r\n            style={{\r\n              display: \"inline-block\",\r\n              padding: \"6px 12px\",\r\n              cursor: \"pointer\",\r\n            }}\r\n            for=\"upload\"\r\n          >\r\n            Upload image:\r\n          </label>\r\n          <input size=\"60\" type=\"file\" id=\"upload\" onChange={captureFile} />\r\n        </div>\r\n\r\n        <button className=\"waveButton\" onClick={wave}>\r\n          Wave at Me\r\n        </button>\r\n\r\n        {!currentAccount && (\r\n          <button className=\"waveButton\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n\r\n        {allWaves.map((wave, index) => {\r\n          return (\r\n            <div\r\n              key={index}\r\n              style={{\r\n                backgroundColor: \"OldLace\",\r\n                marginTop: \"16px\",\r\n                padding: \"8px\",\r\n              }}\r\n            >\r\n              <div style={{ color: \"red\" }}>Address: {wave.address}</div>\r\n              <div style={{ color: \"green\" }}>\r\n                Time: {wave.timestamp.toString()}\r\n              </div>\r\n              <div style={{ color: \"blue\" }}>Message: {wave.message}</div>\r\n\r\n              {getViewButton(wave.ipfsHash) ? (\r\n                <>\r\n                  <a href={getDocumentLink(wave.ipfsHash)} target=\"_blank\">\r\n                    <button className=\"waveButton\">\r\n                      Click to view document\r\n                    </button>\r\n                  </a>\r\n                </>\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const IPFS = require(\"ipfs-http-client\");\r\nconst ipfs = IPFS.create({\r\n  host: \"ipfs.infura.io\",\r\n  port: 5001,\r\n  protocol: \"https\",\r\n});\r\nexport default ipfs;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}